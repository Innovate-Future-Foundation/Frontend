#!groovy
import jenkins.model.*
import org.jenkinsci.plugins.workflow.job.WorkflowJob
import org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition
import hudson.plugins.git.GitSCM
import hudson.plugins.git.BranchSpec
import hudson.plugins.git.UserRemoteConfig
import hudson.triggers.SCMTrigger
import com.cloudbees.github.hook.GitHubRepositoryNameContributor
import org.jenkinsci.plugins.github.config.GitHubPluginConfig
import com.cloudbees.jenkins.GitHubPushTrigger

def jenkins = Jenkins.instance

// 创建 pipeline job
def jobName = 'frontend-pipeline'
def job = jenkins.getItem(jobName)

try {
    // 如果 job 不存在，创建它
    if (job == null) {
        // 创建 pipeline job
        def pipelineJob = jenkins.createProject(WorkflowJob, jobName)
        
        // 配置 Git，不使用凭据
        def gitScm = new GitSCM(
            [new UserRemoteConfig("https://github.com/Innovate-Future-Foundation/Frontend.git", "origin", null, null)],
            [new BranchSpec("*/devops/dylan-v2")],
            false,
            [],
            null,
            null,
            []
        )
        
        // 设置 pipeline 定义
        def flowDefinition = new CpsScmFlowDefinition(gitScm, "Jenkinsfile")
        flowDefinition.setLightweight(true)
        pipelineJob.setDefinition(flowDefinition)
        
        // 设置描述
        pipelineJob.setDescription('Frontend CI/CD Pipeline')
        
        // 添加 GitHub hook trigger
        pipelineJob.addTrigger(new GitHubPushTrigger())
        
        // 保存配置
        pipelineJob.save()
        
        println "Created pipeline job: ${jobName}"
    } else {
        println "Job ${jobName} already exists"
    }
} catch (Exception e) {
    println "Error creating pipeline job: ${e.message}"
    e.printStackTrace()
    throw e
}

// 保存所有更改
jenkins.save()